import{ax as i,z as a,aQ as e,y as l}from"./chunks/framework.CdoyD7j2.js";const c=JSON.parse('{"title":"常见问题","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"pages/guide/qa.md","filePath":"pages/guide/qa.md","lastUpdated":1730340748000}'),n={name:"pages/guide/qa.md"};function t(p,s,h,k,d,r){return l(),a("div",null,s[0]||(s[0]=[e(`<h1 id="常见问题" tabindex="-1">常见问题 <a class="header-anchor" href="#常见问题" aria-label="Permalink to &quot;常见问题&quot;">​</a></h1><h3 id="在使用-vite-的-elemtn-plus-自动导入插件时会导致冲突报错如何解决" tabindex="-1">在使用 vite 的 elemtn-plus 自动导入插件时会导致冲突报错如何解决？ <a class="header-anchor" href="#在使用-vite-的-elemtn-plus-自动导入插件时会导致冲突报错如何解决" aria-label="Permalink to &quot;在使用 vite 的 elemtn-plus 自动导入插件时会导致冲突报错如何解决？&quot;">​</a></h3><ul><li><h5 id="解决方案-1" tabindex="-1">解决方案 1 <a class="header-anchor" href="#解决方案-1" aria-label="Permalink to &quot;解决方案 1&quot;">​</a></h5></li></ul><p>可以在组件引入时指定组件前缀来规避自动导入正则匹配 EL 开头导致报错，如：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { ElementPlusJsx } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;element-plus-jsx&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ElementPlusJsx, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  prefix: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;EX&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>使用时</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ex-formx</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> form-fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;formFn&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><ul><li><h5 id="解决方案-2" tabindex="-1">解决方案 2 <a class="header-anchor" href="#解决方案-2" aria-label="Permalink to &quot;解决方案 2&quot;">​</a></h5></li></ul><p>可以使用 <code>ElementPlusResolver</code> 的 <code>exclude</code> 选项来排除 ElementPlusJsx 的组件，如：</p><p>vite.config.ts</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ···</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ···</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Components</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      resolvers: [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ElementPlusResolver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ exclude:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">El</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*?</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)}</span></span></code></pre></div><h3 id="element-plus-jsx-的组件中-element-plus-的样式无法正常渲染如何解决" tabindex="-1">element-plus-jsx 的组件中 element-plus 的样式无法正常渲染如何解决？ <a class="header-anchor" href="#element-plus-jsx-的组件中-element-plus-的样式无法正常渲染如何解决" aria-label="Permalink to &quot;element-plus-jsx 的组件中 element-plus 的样式无法正常渲染如何解决？&quot;">​</a></h3><p>为了防止包体过大，element-plus-jsx 只集成了 element-plus 的基础组件，并未将其 css 打包，如果打包 css 会导致个人项目中与 element-plus 的样式重叠。</p><ul><li><h5 id="解决方案-1-1" tabindex="-1">解决方案 1 <a class="header-anchor" href="#解决方案-1-1" aria-label="Permalink to &quot;解决方案 1&quot;">​</a></h5></li></ul><p>全量引入 element-plus 的样式</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;element-plus/dist/index.css&#39;</span></span></code></pre></div><ul><li><h5 id="解决方案-2-1" tabindex="-1">解决方案 2 <a class="header-anchor" href="#解决方案-2-1" aria-label="Permalink to &quot;解决方案 2&quot;">​</a></h5></li></ul><p>手动导入对应使用 element-plus 组件的样式</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;element-plus/es/components/input/style&#39;</span></span></code></pre></div><h3 id="在使用-vite-的-elemtn-plus-自动导入插件时-自定义插件中使用的-element-plus-组件不生效如何解决" tabindex="-1">在使用 vite 的 elemtn-plus 自动导入插件时，自定义插件中使用的 element-plus 组件不生效如何解决？ <a class="header-anchor" href="#在使用-vite-的-elemtn-plus-自动导入插件时-自定义插件中使用的-element-plus-组件不生效如何解决" aria-label="Permalink to &quot;在使用 vite 的 elemtn-plus 自动导入插件时，自定义插件中使用的 element-plus 组件不生效如何解决？&quot;">​</a></h3><p>element-plus 的自动导入插件默认只解析 vue 文件中使用的组件，将 tsx 添加到解析即可</p><p>vite.config.ts</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ···</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ···</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Components</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      extensions: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;tsx&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ···</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div>`,23)]))}const o=i(n,[["render",t]]);export{c as __pageData,o as default};
